// Cloud IaaS
rule GCPServiceAccountCredential {
    meta:
        name = "GCP Service account credentials"
		source = "https://github.com/stacscan/stacs-rules/blob/main/rules/credential/cloud/gcp/service_account.yar"
        retrieved = "20211123"

    strings:
        $ascii_0 = "\"client_x509_cert_url\"" nocase wide ascii
        $ascii_1 = "\"private_key\"" nocase wide ascii
        $ascii_2 = "\"client_email\"" nocase wide ascii

        $base64_0 = "\"client_x509_cert_url\"" base64 base64wide
        $base64_1 = "\"private_key\"" base64 base64wide
        $base64_2 = "\"client_email\"" base64 base64wide

    condition:
        ($ascii_0 and $ascii_1 and $ascii_2)
        or
        ($base64_0 and $base64_1 and $base64_2)
}

rule GCPOAuthToken {
    meta:
        name = "GCP OAuth Token"
        description = "GCP OAuth token, usually in a sqlite3 or json file."
    
    strings:
        $string0 = "\"client_id\"" nocase ascii wide
        $string1 = "\"client_secret\"" nocase ascii wide
        $string2 = "\"refresh_token\"" nocase ascii wide
        $string3 = "apps.googleusercontent.com" nocase ascii wide

	condition:
		$string0 and $string1 and $string2 and $string3
}

rule AWSAccessKeyPair {
	meta:
        name = "AWS Access key Pair"

	strings:
		$string0 = /\bA(K|S)IA[A-Z0-9]{16}\b/ ascii wide
		$string1 = /\b[a-zA-Z0-9\/+]{40}\b/ ascii wide
	condition:
		$string0 and $string1
}

// TODO: Azure

// Online services
rule GithubAPIToken {
    meta:
        name = "Github API token"
        source = "https://github.com/stacscan/stacs-rules/blob/main/rules/credential/saas/github/token.yar"
        retrieved = "20211123"

    strings:
        $ascii_0  = /(ghp|gho|ghu|ghs|ghr)_[A-Za-z0-9_]{36,255}/ ascii wide
    
    condition:
        any of them
}

rule ShodanAPIToken {
    meta:
        name = "Shodan API Token"
        source = "https://github.com/ail-project/ail-yara-rules/blob/master/rules/api-keys/shodan_api.yar"
        retrieved = "20211123"

    strings:
        $ = /shodan_api_key: [a-zA-Z0-9]+/ nocase wide
        $ = /shodan_api_key=[a-zA-Z0-9]+/ nocase wide
    condition:
        any of them
}

rule GenericOAuthToken {
    meta:
        name = "Generic OAuth Token"
    
    strings:
        $string0 = "\"client_id\"" nocase ascii wide
        $string1 = "\"client_secret\"" nocase ascii wide
        $string2 = "\"refresh_token\"" nocase ascii wide
        $string3 = "apps.googleusercontent.com" nocase ascii wide

	condition:
		$string0 and $string1 and $string2 and not $string3
}

// Openssl/ssh plaintext keys
rule OpensslPlaintextDSA {
    meta:
        name = "Openssl DSA Plaintext Private Key"
        comment = "PEM encoded only. DER encodings have no headers aside from a starting with an ASN1 Sequence, but so do a lot of things."
    
    strings:
        $string0 = /-----BEGIN DSA PRIVATE KEY-----\n\n?MII/ ascii wide
    
    condition:
        any of them
}

rule OpensslPlaintextRSA {
    meta:
        name = "Openssl RSA Plaintext Private Key"
        comment = "PEM encoded only. DER encodings have no headers aside from a starting with an ASN1 Sequence, but so do a lot of things."
    
    strings:
        $string0 = /-----BEGIN RSA PRIVATE KEY-----\n\n?MII/ ascii wide
    
    condition:
        any of them
}

rule OpensslPlaintextEC {
    meta:
        name = "Openssl EC Plaintext Private Key"
        comment = "PEM encoded only. DER encodings have no headers aside from a starting with an ASN1 Sequence, but so do a lot of things."
    
    strings:
        $string0 = /-----BEGIN EC PRIVATE KEY-----\n\n?MHQ/ ascii wide
    
    condition:
        any of them
}

rule OpenSSHPrivateKey {
    meta:
        name = "Openssh private key"
        comment = "Keys generated by ssh-keygen. We cannot determine here if the key is password protected."
    
    strings:
        $string0 = "-----BEGIN OPENSSH PRIVATE KEY-----" ascii wide

    condition:
        $string0
}
